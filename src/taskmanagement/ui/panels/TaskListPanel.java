package taskmanagement.ui.panels;

import taskmanagement.application.viewmodel.TasksViewModel;
import taskmanagement.domain.ITask;
import taskmanagement.domain.TaskState;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.Optional;

/**
 * Tasks table panel. Displays tasks and routes user actions to the ViewModel.
 */
public final class TaskListPanel extends JPanel {

    private final TasksViewModel vm;
    private final JTable table;
    private final DefaultTableModel model;

    /**
     * Creates a panel with a read-only table of tasks.
     *
     * @param viewModel the Tasks ViewModel to bind to
     */
    public TaskListPanel(TasksViewModel viewModel) {
        super(new BorderLayout());
        this.vm = viewModel;

        model = new DefaultTableModel(new Object[]{"ID", "Title", "Description", "State"}, 0) {
            @Override public boolean isCellEditable(int row, int column) { return false; }
            @Override public Class<?> getColumnClass(int columnIndex) {
                return switch (columnIndex) {
                    case 0 -> Integer.class;
                    case 1, 2, 3 -> String.class;
                    default -> Object.class;
                };
            }
        };
        table = new JTable(model);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        add(new JScrollPane(table), BorderLayout.CENTER);

        refresh();
    }

    /**
     * Reloads the table from the ViewModel snapshot.
     */
    public void refresh() {
        model.setRowCount(0);
        for (ITask t : vm.getTasksSnapshot()) {
            model.addRow(new Object[]{
                    t.getId(),
                    t.getTitle(),
                    t.getDescription(),
                    t.getState().name()
            });
        }
    }

    /**
     * Opens an add-task dialog and forwards the result to the ViewModel.
     *
     * @param parent a component used to locate the dialog
     */
    public void openAddDialog(Component parent) {
        TaskEditorDialog dlg = new TaskEditorDialog(SwingUtilities.getWindowAncestor(parent), null);
        dlg.setVisible(true);
        dlg.getResult().ifPresent(vm::addTask);
        refresh();
    }

    /**
     * Opens an edit-task dialog for the selected row.
     *
     * @param parent a component used to locate the dialog
     */
    public void openEditDialog(Component parent) {
        var sel = table.getSelectedRow();
        if (sel < 0) return;
        int id = (int) model.getValueAt(sel, 0);
        Optional<ITask> existing = vm.findTaskById(id);
        if (existing.isEmpty()) return;

        TaskEditorDialog dlg = new TaskEditorDialog(SwingUtilities.getWindowAncestor(parent), existing.get());
        dlg.setVisible(true);
        dlg.getResult().ifPresent(vm::updateTask);
        refresh();
    }

    /**
     * Deletes the selected task via the ViewModel.
     */
    public void deleteSelected() {
        var sel = table.getSelectedRow();
        if (sel < 0) return;
        int id = (int) model.getValueAt(sel, 0);
        vm.deleteTask(id);
        refresh();
    }

    /**
     * Marks the selected task with the provided state.
     *
     * @param stateName enum name of the desired TaskState
     */
    public void markSelectedState(String stateName) {
        var sel = table.getSelectedRow();
        if (sel < 0) return;
        int id = (int) model.getValueAt(sel, 0);
        TaskState newState = TaskState.valueOf(stateName);
        vm.markTaskState(id, newState);
        refresh();
    }

    /**
     * Shows a plain text report generated by the ViewModel (Visitor + Adapter).
     *
     * @param parent a component used to locate the dialog
     */
    public void showReport(Component parent) {
        String plain = vm.generatePlainTextReport();
        JTextArea ta = new JTextArea(plain, 20, 60);
        ta.setEditable(false);
        ta.setLineWrap(true);
        ta.setWrapStyleWord(true);
        JOptionPane.showMessageDialog(parent, new JScrollPane(ta), "Report", JOptionPane.INFORMATION_MESSAGE);
    }
}
