openapi: 3.0.0
info:
  title: TasksViewModel API
  version: "1.0"
  description: >
    ViewModel layer API for the **Tasks Management Application**.
    Provides CRUD operations, state management, filtering (Combinator),
    reporting/export (Visitor + Records & Pattern Matching),
    sorting (Strategy), and undo/redo (Command pattern).
paths:
  /tasks:
    get:
      summary: Get all tasks (unfiltered, UI snapshot).
      operationId: getRows
      responses:
        "200":
          description: List of all tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RowDTO"
    post:
      summary: Add a new task.
      operationId: addTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, state]
              properties:
                title:
                  type: string
                description:
                  type: string
                  nullable: true
                state:
                  $ref: "#/components/schemas/TaskState"
      responses:
        "200":
          description: Task added successfully
        "400":
          description: Invalid arguments
        "500":
          description: DAO failure
    delete:
      summary: Delete all tasks.
      operationId: deleteAll
      responses:
        "200":
          description: All tasks deleted
        "500":
          description: DAO failure
  /tasks/{id}:
    get:
      summary: Find a task by ID.
      operationId: findRowById
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Task found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RowDTO"
        "404":
          description: Task not found
    put:
      summary: Update an existing task.
      operationId: updateTask
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, state]
              properties:
                title:
                  type: string
                description:
                  type: string
                  nullable: true
                state:
                  $ref: "#/components/schemas/TaskState"
      responses:
        "200":
          description: Task updated
        "400":
          description: Invalid arguments
        "404":
          description: Task not found
        "500":
          description: DAO failure
    delete:
      summary: Delete a single task by ID.
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Task deleted
        "404":
          description: Task not found
        "500":
          description: DAO failure
  /tasks/batchDelete:
    post:
      summary: Delete multiple tasks by ID.
      operationId: deleteTasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { type: integer }
      responses:
        "200":
          description: Tasks deleted
        "500":
          description: DAO failure
  /tasks/states:
    get:
      summary: Get all available task states (enum values).
      operationId: getAvailableStates
      responses:
        "200":
          description: List of possible task states
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/TaskState" }
  /tasks/{id}/state:
    put:
      summary: Set a task’s state explicitly.
      operationId: markState
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskState"
      responses:
        "200":
          description: Task state updated
        "400":
          description: Invalid or illegal state transition
        "404":
          description: Task not found
        "500":
          description: DAO failure
  /tasks/{id}/advance:
    post:
      summary: Advance a task to the next legal state (State pattern).
      operationId: advanceState
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Task advanced
        "400":
          description: Illegal transition or invalid ID
        "404":
          description: Task not found
        "500":
          description: DAO failure
  /filters:
    post:
      summary: Apply a combinator filter to tasks.
      operationId: setFilter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ITaskFilter"
      responses:
        "200":
          description: Filter applied
    delete:
      summary: Clear active filter.
      operationId: clearFilter
      responses:
        "200":
          description: Filter cleared
  /rows/filtered:
    get:
      summary: Get filtered task rows (Combinator).
      operationId: getFilteredRows
      responses:
        "200":
          description: Filtered task list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RowDTO"
  /commands/undo:
    get:
      summary: Check if undo is available.
      operationId: canUndo
      responses:
        "200":
          description: Boolean
          content:
            application/json:
              schema: { type: boolean }
    post:
      summary: Undo the last command.
      operationId: undo
      responses:
        "200":
          description: Command undone
        "500":
          description: Undo failed
  /commands/redo:
    get:
      summary: Check if redo is available.
      operationId: canRedo
      responses:
        "200":
          description: Boolean
          content:
            application/json:
              schema: { type: boolean }
    post:
      summary: Redo the last undone command.
      operationId: redo
      responses:
        "200":
          description: Command redone
        "500":
          description: Redo failed
  /reports/byState:
    get:
      summary: Get a ByStateCount report (Visitor pattern).
      operationId: getCountsByState
      parameters:
        - name: useFiltered
          in: query
          schema: { type: boolean }
      responses:
        "200":
          description: Counts by state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ByStateCount"
  /reports/byState/map:
    get:
      summary: Get counts by state as a key/value map.
      operationId: getCountsMapByState
      parameters:
        - name: useFiltered
          in: query
          schema: { type: boolean }
      responses:
        "200":
          description: Map of TaskState → count
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
  /exports/tasks:
    post:
      summary: Export tasks to file (CSV or TXT).
      operationId: exportTasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [path, format, useFiltered]
              properties:
                path: { type: string }
                format: { $ref: "#/components/schemas/ExportFormat" }
                useFiltered: { type: boolean }
                filteredIds:
                  type: array
                  items: { type: integer }
      responses:
        "200":
          description: File written successfully
        "500":
          description: DAO or IO failure
  /exports/reports/byState:
    post:
      summary: Export a ByState report to file (CSV or TXT).
      operationId: exportByStateReport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [path, format, useFiltered]
              properties:
                path: { type: string }
                format: { $ref: "#/components/schemas/ExportFormat" }
                useFiltered: { type: boolean }
                filteredIds:
                  type: array
                  items: { type: integer }
      responses:
        "200":
          description: File written successfully
        "500":
          description: DAO or IO failure
components:
  schemas:
    RowDTO:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        description: { type: string }
        state: { type: string }
    TaskState:
      type: string
      enum: [ToDo, InProgress, Completed]
    ITaskFilter:
      type: object
      description: >
        Interface representing a composable filter (Combinator pattern).
        The ViewModel accepts an implementation reference.
    ByStateCount:
      type: object
      properties:
        todo: { type: integer }
        inProgress: { type: integer }
        completed: { type: integer }
    ExportFormat:
      type: string
      enum: [CSV, TXT]
